#switch driver
IF (WIN32)
	set(RUN_PLATFORM "win32")
ELSEIF (APPLE)
        set(RUN_PLATFORM "apple")
ELSEIF (UNIX)
        set(RUN_PLATFORM "unix")
        aux_source_directory (${PROJECT_SOURCE_DIR}/src/drv/unix/ LOW_DRV)
        include_directories  (${PROJECT_SOURCE_DIR}/src/drv/unix/)
      
ENDIF ()
option(INSTALL_LIB "install lib to /usr/lib" OFF)
add_compile_options(-std=c++11 -Wall -g ) 
#config the src
aux_source_directory (${PROJECT_SOURCE_DIR}/src/net/ NET_LIST)
aux_source_directory (${PROJECT_SOURCE_DIR}/src/vm/ VM_LIST)
aux_source_directory (${PROJECT_SOURCE_DIR}/src/os/ OS_LIST)
aux_source_directory (${PROJECT_SOURCE_DIR}/src/group/ GR_LIST)
aux_source_directory (${PROJECT_SOURCE_DIR}/src/example/ EXA_LIST)
#set(CMAKE_C_COMPILER "gcc")
#set(CMAKE_CXX_COMPILER "g++")
include_directories  (${PROJECT_SOURCE_DIR}/include)
option(WITH_EXAMPLE "build the generic netvmos example " ON)
add_library (VML_shared SHARED  ${NET_LIST} ${OS_LIST} ${VM_LIST} ${LOW_DRV} ${GR_LIST})
add_library (VML_static STATIC  ${NET_LIST} ${OS_LIST} ${VM_LIST} ${LOW_DRV} ${GR_LIST})
set_target_properties (VML_shared PROPERTIES OUTPUT_NAME "netvmoslib")
set_target_properties (VML_static PROPERTIES OUTPUT_NAME "netvmoslib")
set (LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/libbin)
target_link_libraries(VML_shared m rt pthread)
target_link_libraries(VML_static m rt pthread)
message(STATUS "vm lib will be built")
if(INSTALL_LIB)
install (TARGETS VML_shared DESTINATION lib)
install (TARGETS VML_shared DESTINATION "/usr/local/lib")
endif()
if(WITH_EXAMPLE)
add_executable (webasm ${NET_LIST} ${OS_LIST} ${VM_LIST} ${LOW_DRV} ${GR_LIST} ${EXA_LIST})
target_link_libraries(webasm m rt pthread)
set (EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
endif()

add_subdirectory(os)
add_subdirectory(vm)
add_subdirectory(net)

